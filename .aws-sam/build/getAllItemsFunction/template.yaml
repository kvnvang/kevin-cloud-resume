AWSTemplateFormatVersion: 2010-09-09
Description: >-
  kevin-cloud-resume-challenge
Transform:
- AWS::Serverless-2016-10-31

# Parameters to reference CloudFront
Parameters:
  ExistingCloudFrontDistributionId:
    Type: String
    Default: E2XYPE5EEOCVV1
    Description: ID of the existing CloudFront distribution

Resources:
  # This is a Lambda function config associated with the source code: get-all-items.js
  getAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-all-items.getAllItemsHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from
        a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the VisitorCountTable
        - DynamoDBCrudPolicy:
            TableName: !Ref VisitorCountTable
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref VisitorCountTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET

  # This is a Lambda function config associated with the source code: get-by-id.js
  getByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-by-id.getByIdHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by
        id from a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref VisitorCountTable
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref VisitorCountTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{id}
            Method: GET

  # This is a Lambda function config associated with the source code: put-item.js
  putItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/put-item.putItemHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to
        a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref VisitorCountTable
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref VisitorCountTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: POST

  # Explicit DynamoDB table (named 'kevin-cloud-resume') to store visitor count or other resume-related data
  VisitorCountTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: kevin-cloud-resume
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  # Create new S3 bucket named 'kevin-cloud-resume-challenge'
  ResumeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: kevinv-cloud-resume-challenge
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

# Outputs to display after deployment
Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

  S3BucketName:
    Description: Name of the new S3 bucket
    Value: !Ref ResumeBucket

  CloudFrontDistributionId:
    Description: Existing CloudFront distribution ID
    Value: !Ref ExistingCloudFrontDistributionId

  CloudFrontURL:
    Description: CloudFront URL for resume site
    Value: !Sub "https://${ExistingCloudFrontDistributionId}.cloudfront.net"

  DynamoDBTableName:
    Description: Name of the DynamoDB table
    Value: kevin-cloud-resume

# # More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Tracing: Active
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true
